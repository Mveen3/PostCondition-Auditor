[
  {
    "task_id": 2,
    "prompt": "Write a function to find the shared elements from the given two lists.",
    "code": "def similar_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) ",
    "test_imports": [],
    "test_list": [
      "assert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))",
      "assert set(similar_elements((1, 2, 3, 4),(5, 4, 3, 7))) == set((3, 4))",
      "assert set(similar_elements((11, 12, 14, 13),(17, 15, 14, 13))) == set((13, 14))"
    ]
  },
  {
    "task_id": 3,
    "prompt": "Write a python function to identify non-prime numbers.",
    "code": "import math\ndef is_not_prime(n):\n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result",
    "test_imports": [],
    "test_list": [
      "assert is_not_prime(2) == False",
      "assert is_not_prime(10) == True",
      "assert is_not_prime(35) == True",
      "assert is_not_prime(37) == False"
    ]
  },
  {
    "task_id": 4,
    "prompt": "Write a function to find the n largest integers from a given list of numbers, returned in descending order.",
    "code": "import heapq as hq\ndef heap_queue_largest(nums,n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums",
    "test_imports": [],
    "test_list": [
      "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]",
      "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75]",
      "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]"
    ]
  },
  {
    "task_id": 6,
    "prompt": "Write a python function to check whether the two numbers differ at one bit position only or not.",
    "code": "def is_Power_Of_Two (x): \n    return x and (not(x & (x - 1))) \ndef differ_At_One_Bit_Pos(a,b): \n    return is_Power_Of_Two(a ^ b)",
    "test_imports": [],
    "test_list": [
      "assert differ_At_One_Bit_Pos(13,9) == True",
      "assert differ_At_One_Bit_Pos(15,8) == False",
      "assert differ_At_One_Bit_Pos(2,4) == False",
      "assert differ_At_One_Bit_Pos(2, 3) == True",
      "assert differ_At_One_Bit_Pos(5, 1) == True",
      "assert differ_At_One_Bit_Pos(1, 5) == True"
    ]
  },
  {
    "task_id": 7,
    "prompt": "Write a function to find all words which are at least 4 characters long in a string.",
    "code": "import re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))",
    "test_imports": [],
    "test_list": [
      "assert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])",
      "assert set(find_char_long('Jing Eco and Tech')) == set(['Jing', 'Tech'])",
      "assert set(find_char_long('Jhingai wulu road Zone 3')) == set(['Jhingai', 'wulu', 'road', 'Zone'])"
    ]
  },
  {
    "task_id": 8,
    "prompt": "Write a function to find squares of individual elements in a list.",
    "code": "def square_nums(nums):\n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums",
    "test_imports": [],
    "test_list": [
      "assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
      "assert square_nums([10,20,30])==([100,400,900])",
      "assert square_nums([12,15])==([144,225])"
    ]
  },
  {
    "task_id": 9,
    "prompt": "Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.",
    "code": "def find_Rotations(str): \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n ",
    "test_imports": [],
    "test_list": [
      "assert find_Rotations(\"aaaa\") == 1",
      "assert find_Rotations(\"ab\") == 2",
      "assert find_Rotations(\"abc\") == 3"
    ]
  },
  {
    "task_id": 11,
    "prompt": "Write a python function to remove first and last occurrence of a given character from the string.",
    "code": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ",
    "test_imports": [],
    "test_list": [
      "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
      "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
      "assert remove_Occ(\"PHP\",\"P\") == \"H\""
    ]
  },
  {
    "task_id": 12,
    "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
    "code": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result",
    "test_imports": [],
    "test_list": [
      "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
      "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
      "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
    ]
  },
  {
    "task_id": 14,
    "prompt": "Write a python function to find the volume of a triangular prism.",
    "code": "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) ",
    "test_imports": [],
    "test_list": [
      "assert find_Volume(10,8,6) == 240",
      "assert find_Volume(3,2,2) == 6",
      "assert find_Volume(1,2,1) == 1"
    ]
  },
  {
    "task_id": 96,
    "prompt": "Write a python function to find the number of divisors of a given integer.",
    "code": "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x",
    "test_imports": [],
    "test_list": [
      "assert divisor(15) == 4",
      "assert divisor(12) == 6",
      "assert divisor(9) == 3"
    ]
  },
  {
    "task_id": 97,
    "prompt": "Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.",
    "code": "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n",
    "test_imports": [],
    "test_list": [
      "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
      "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}",
      "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"
    ]
  },
  {
    "task_id": 98,
    "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
    "code": "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) ",
    "test_imports": [
      "import math"
    ],
    "test_list": [
      "assert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)",
      "assert math.isclose(multiply_num((-10,-20,-30)), -2000.0, rel_tol=0.001)",
      "assert math.isclose(multiply_num((19,15,18)), 1710.0, rel_tol=0.001)"
    ]
  },
  {
    "task_id": 99,
    "prompt": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
    "code": "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") ",
    "test_imports": [],
    "test_list": [
      "assert decimal_to_binary(8) == '1000'",
      "assert decimal_to_binary(18) == '10010'",
      "assert decimal_to_binary(7) == '111'"
    ]
  },
  {
    "task_id": 100,
    "prompt": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.",
    "code": "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i",
    "test_imports": [],
    "test_list": [
      "assert next_smallest_palindrome(99)==101",
      "assert next_smallest_palindrome(1221)==1331",
      "assert next_smallest_palindrome(120)==121"
    ]
  },
  {
    "task_id": 101,
    "prompt": "Write a function to find the kth element in the given array using 1-based indexing.",
    "code": "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]",
    "test_imports": [],
    "test_list": [
      "assert kth_element([12,3,5,7,19], 2) == 3",
      "assert kth_element([17,24,8,23], 3) == 8",
      "assert kth_element([16,21,25,36,4], 4) == 36"
    ]
  },
  {
    "task_id": 102,
    "prompt": "Write a function to convert a snake case string to camel case string.",
    "code": "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))",
    "test_imports": [],
    "test_list": [
      "assert snake_to_camel('python_program')=='PythonProgram'",
      "assert snake_to_camel('python_language')==('PythonLanguage')",
      "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"
    ]
  },
  {
    "task_id": 103,
    "prompt": "Write a function to find the Eulerian number a(n, m).",
    "code": "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))",
    "test_imports": [],
    "test_list": [
      "assert eulerian_num(3, 1) == 4",
      "assert eulerian_num(4, 1) == 11",
      "assert eulerian_num(5, 3) == 26"
    ]
  },
  {
    "task_id": 104,
    "prompt": "Write a function to sort each sublist of strings in a given list of lists.",
    "code": "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n",
    "test_imports": [],
    "test_list": [
      "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
      "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]",
      "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"
    ]
  },
  {
    "task_id": 105,
    "prompt": "Write a python function to count true booleans in the given list.",
    "code": "def count(lst):   \n    return sum(lst) ",
    "test_imports": [],
    "test_list": [
      "assert count([True,False,True]) == 2",
      "assert count([False,False]) == 0",
      "assert count([True,True,True]) == 3"
    ]
  },
  {
    "task_id": 170,
    "prompt": "Write a function to find the sum of numbers in a list within a range specified by two indices.",
    "code": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   ",
    "test_imports": [],
    "test_list": [
      "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29",
      "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16",
      "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38"
    ]
  },
  {
    "task_id": 171,
    "prompt": "Write a function to find the perimeter of a regular pentagon from the length of its sides.",
    "code": "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter",
    "test_imports": [],
    "test_list": [
      "assert perimeter_pentagon(5) == 25",
      "assert perimeter_pentagon(10) == 50",
      "assert perimeter_pentagon(15) == 75"
    ]
  },
  {
    "task_id": 172,
    "prompt": "Write a function to count the number of occurence of the string 'std' in a given string.",
    "code": "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count",
    "test_imports": [],
    "test_list": [
      "assert count_occurance(\"letstdlenstdporstd\") == 3",
      "assert count_occurance(\"truststdsolensporsd\") == 1",
      "assert count_occurance(\"makestdsostdworthit\") == 2",
      "assert count_occurance(\"stds\") == 1",
      "assert count_occurance(\"\") == 0"
    ]
  },
  {
    "task_id": 222,
    "prompt": "Write a function to check if all the elements in tuple have same data type or not.",
    "code": "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) ",
    "test_imports": [],
    "test_list": [
      "assert check_type((5, 6, 7, 3, 5, 6) ) == True",
      "assert check_type((1, 2, \"4\") ) == False",
      "assert check_type((3, 2, 1, 4, 5) ) == True"
    ]
  },
  {
    "task_id": 223,
    "prompt": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)",
    "code": "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1",
    "test_imports": [],
    "test_list": [
      "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True",
      "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
      "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True",
      "assert is_majority([1, 1, 2, 2], 5, 1) == False"
    ]
  },
  {
    "task_id": 224,
    "prompt": "Write a python function to count the number of set bits (binary digits with value 1) in a given number.",
    "code": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count ",
    "test_imports": [],
    "test_list": [
      "assert count_Set_Bits(2) == 1",
      "assert count_Set_Bits(4) == 1",
      "assert count_Set_Bits(6) == 2"
    ]
  },
  {
    "task_id": 226,
    "prompt": "Write a python function to remove the characters which have odd index values of a given string.",
    "code": "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result",
    "test_imports": [],
    "test_list": [
      "assert odd_values_string('abcdef') == 'ace'",
      "assert odd_values_string('python') == 'pto'",
      "assert odd_values_string('data') == 'dt'",
      "assert odd_values_string('lambs') == 'lms'"
    ]
  },
  {
    "task_id": 227,
    "prompt": "Write a function to find minimum of three numbers.",
    "code": "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest ",
    "test_imports": [],
    "test_list": [
      "assert min_of_three(10,20,0)==0",
      "assert min_of_three(19,15,18)==15",
      "assert min_of_three(-10,-20,-30)==-30"
    ]
  },
  {
    "task_id": 228,
    "prompt": "Write a python function to check whether all the bits are unset in the given range or not.",
    "code": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False",
    "test_imports": [],
    "test_list": [
      "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True",
      "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True",
      "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False"
    ]
  },
  {
    "task_id": 229,
    "prompt": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.",
    "code": "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr",
    "test_imports": [],
    "test_list": [
      "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
      "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]",
      "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"
    ]
  },
  {
    "task_id": 278,
    "prompt": "Write a function to find the number of elements that occurs before the tuple element in the given tuple.",
    "code": "def count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) ",
    "test_imports": [],
    "test_list": [
      "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3",
      "assert count_first_elements((2, 9, (5, 7), 11) ) == 2",
      "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"
    ]
  },
  {
    "task_id": 279,
    "prompt": "Write a function to find the nth decagonal number.",
    "code": "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n ",
    "test_imports": [],
    "test_list": [
      "assert is_num_decagonal(3) == 27",
      "assert is_num_decagonal(7) == 175",
      "assert is_num_decagonal(10) == 370"
    ]
  },
  {
    "task_id": 280,
    "prompt": "Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).",
    "code": "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos",
    "test_imports": [],
    "test_list": [
      "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
      "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)",
      "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"
    ]
  },
  {
    "task_id": 281,
    "prompt": "Write a python function to check if the elements of a given list are unique or not.",
    "code": "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True",
    "test_imports": [],
    "test_list": [
      "assert all_unique([1,2,3]) == True",
      "assert all_unique([1,2,1,2]) == False",
      "assert all_unique([1,2,3,4,5]) == True"
    ]
  },
  {
    "task_id": 282,
    "prompt": "Write a function to subtract two lists element-wise.",
    "code": "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)",
    "test_imports": [],
    "test_list": [
      "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]",
      "assert sub_list([1,2],[3,4])==[-2,-2]",
      "assert sub_list([90,120],[50,70])==[40,50]"
    ]
  },
  {
    "task_id": 283,
    "prompt": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
    "code": "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True",
    "test_imports": [],
    "test_list": [
      "assert validate(1234) == True",
      "assert validate(51241) == False",
      "assert validate(321) == True"
    ]
  },
  {
    "task_id": 284,
    "prompt": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.",
    "code": "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element",
    "test_imports": [],
    "test_list": [
      "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False",
      "assert check_element([1,2,3,4],7)==False",
      "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"
    ]
  },
  {
    "task_id": 285,
    "prompt": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
    "code": "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
    "test_imports": [],
    "test_list": [
      "assert text_match_two_three(\"ac\")==(False)",
      "assert text_match_two_three(\"dc\")==(False)",
      "assert text_match_two_three(\"abbbba\")==(True)"
    ]
  },
  {
    "task_id": 286,
    "prompt": "Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.",
    "code": "def max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far",
    "test_imports": [],
    "test_list": [
      "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30",
      "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59",
      "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"
    ]
  },
  {
    "task_id": 287,
    "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
    "code": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)",
    "test_imports": [],
    "test_list": [
      "assert square_Sum(2) == 20",
      "assert square_Sum(3) == 56",
      "assert square_Sum(4) == 120"
    ]
  },
  {
    "task_id": 410,
    "prompt": "Write a function to find the minimum value in a given heterogeneous list.",
    "code": "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val",
    "test_imports": [],
    "test_list": [
      "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2",
      "assert min_val(['Python', 15, 20, 25])==15",
      "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"
    ]
  },
  {
    "task_id": 411,
    "prompt": "Write a function to convert the given snake case string to camel case string.",
    "code": "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))",
    "test_imports": [],
    "test_list": [
      "assert snake_to_camel('android_tv') == 'AndroidTv'",
      "assert snake_to_camel('google_pixel') == 'GooglePixel'",
      "assert snake_to_camel('apple_watch') == 'AppleWatch'"
    ]
  },
  {
    "task_id": 412,
    "prompt": "Write a python function to remove odd numbers from a given list.",
    "code": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l",
    "test_imports": [],
    "test_list": [
      "assert remove_odd([1,2,3]) == [2]",
      "assert remove_odd([2,4,6]) == [2,4,6]",
      "assert remove_odd([10,20,3]) == [10,20]"
    ]
  },
  {
    "task_id": 413,
    "prompt": "Write a function to extract the nth element from a given list of tuples.",
    "code": "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result",
    "test_imports": [],
    "test_list": [
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']",
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]",
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"
    ]
  },
  {
    "task_id": 414,
    "prompt": "Write a python function to check whether any value in a sequence exists in a sequence or not.",
    "code": "def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False",
    "test_imports": [],
    "test_list": [
      "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False",
      "assert overlapping([1,2,3],[4,5,6]) == False",
      "assert overlapping([1,4,5],[1,4,5]) == True"
    ]
  },
  {
    "task_id": 415,
    "prompt": "Write a python function to find a pair with highest product from a given array of integers.",
    "code": "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    ",
    "test_imports": [],
    "test_list": [
      "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)",
      "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)",
      "assert max_Product([1,2,3]) == (2,3)"
    ]
  },
  {
    "task_id": 417,
    "prompt": "Write a function to find common first element in given list of tuple.",
    "code": "def group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] ",
    "test_imports": [],
    "test_list": [
      "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]",
      "assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]",
      "assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]"
    ]
  },
  {
    "task_id": 418,
    "prompt": "Write a python function to find the element of a list having maximum length.",
    "code": "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList",
    "test_imports": [],
    "test_list": [
      "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
      "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]",
      "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"
    ]
  },
  {
    "task_id": 419,
    "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
    "code": "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum",
    "test_imports": [],
    "test_list": [
      "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243",
      "assert round_and_sum([5,2,9,24.3,29])==345",
      "assert round_and_sum([25.0,56.7,89.2])==513"
    ]
  },
  {
    "task_id": 420,
    "prompt": "Write a python function to find the cube sum of first n even natural numbers.",
    "code": "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum",
    "test_imports": [],
    "test_list": [
      "assert cube_Sum(2) == 72",
      "assert cube_Sum(3) == 288",
      "assert cube_Sum(4) == 800"
    ]
  }
]